module m1cs.WHParamsBase

import "../utils.pkl"
import "../config/EIdDictionaryBase.pkl"
import "../EIdDictionary.pkl"

typealias Handed = "CCW" | "CW"

hidden const lowWHId = 1
hidden const highWHId = 2 //21

///
/// Type for Warping harness IDs limited from 1 to 21
typealias WHId = (Int((id) ->  id >= lowWHId && id <= highWHId))

///
/// Warping Harness Limits
///
class WHLimits {
  lowLimit: Float = -10.0
  highLimit: Float = 10.0
}

///
/// Strain Gauge Config
///
class StrainGaugeParams {
  offset: Float = 1.23
  width: Float = 4.56
}

///
/// Warping Harness Params
///
class WHParams {
  whId:WHId = 1
  gaugeRep: Float = 1.0
  tempCoeff: Float = 2.0
  calTemp: Float = 3.0
  posGain: Float = 4.0
  negGain: Float = 5.0
  handedness: Handed = "CW"
  limits: WHLimits
  strain: StrainGaugeParams
}

///
/// A WHEntry contains a segment ID label for the segments warping haresses
///
class WHEntry {
  segEId:EIdDictionaryBase.EId
  whs:Listing<WHParams>
}

///
/// This function creates a single WHEntry
///
function createWhEntry(segName: utils.SegName): WHEntry =
  new {
    segEId = EIdDictionary.eIdDictionary[segName].mirrorCellEId
    whs = new {
      for (i in IntSeq(1, highWHId)) {
        new WHParams {
          whId = i
        }
      }
    }
  }

typealias WarpingHarnessConfig = Mapping<utils.SegName, WHEntry>

hidden defaultWarpingHarnessConfig: WarpingHarnessConfig = new {
  for (e in utils.segmentList) {
      [e] = createWhEntry(e)
    }
  }